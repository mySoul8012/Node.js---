var fs = require("fs"),
	path = require("path"),
	opt = require("node-getopt").create([
		["c", "create=ARG", "creates a new Matchjs project"],
		["h", "help", "displays this help"],
		["f", "force", "force create project"],
		["v", "version", "show version"]
	]).bindHelp().parseSystem();

var matchProject = {
	templates: {
		path: path.join(__dirname, "templates"),
		server: path.join(__dirname, "templates", "server_template.js"),
		index: path.join(__dirname, "templates", "index.html"),
		main: path.join(__dirname, "templates", "main.js"),
		match: path.join(__dirname, "templates", "match.js")
	},

};

var deleteFolderRecursive = function(path) {
	if (fs.existsSync(path)) {
		fs.readdirSync(path).forEach(function(file, index) {
			var curPath = path + "/" + file;
			if (fs.lstatSync(curPath).isDirectory()) { // recurse
				deleteFolderRecursive(curPath);
			} else { // delete file
				fs.unlinkSync(curPath);
			}
		});
		fs.rmdirSync(path);
	}
};

if ( opt.options.create ) {

	var project = {
		"name": opt.options.create,
		"path": {
			"self": path.join(process.cwd(), opt.options.create),
			"public": {
				"self": path.join(process.cwd(), opt.options.create, "public"),
				"main": path.join(process.cwd(), opt.options.create, "public", "main.js"),
				"index": path.join(process.cwd(), opt.options.create, "public", "index.html"),
				"match": path.join(process.cwd(), opt.options.create, "public", "match.js"),
				"assets": {
					"self": path.join(process.cwd(), opt.options.create, "public", "assets"),
					"sounds": path.join(process.cwd(), opt.options.create, "public", "assets", "sounds"),
					"sprites": path.join(process.cwd(), opt.options.create, "public", "assets", "sprites")
				}
			},
			"app": path.join(process.cwd(), opt.options.create, "app.js")
		}
	}

	if ( fs.existsSync(project.path.self) ) {

		if ( opt.options.force ) {
			deleteFolderRecursive(project.path.self);
		} else {
			console.log(project.name, "already exists. Use -f to override");
			return;
		}

	}

	fs.mkdir(project.path.self, function (error) {
		
		if ( !error ) {

			fs.mkdir(project.path.public.self, function (error) {

				fs.writeFile(project.path.public.main, fs.readFileSync(matchProject.templates.main), function(err) {
				    if(err) {
				        console.log(err);
				    }
				});

				fs.writeFile(project.path.public.index, fs.readFileSync(matchProject.templates.index).toString().replace("{{projectName}}", project.name), function(err) {
				    if(err) {
				        console.log(err);
				    }
				});

				fs.writeFile(project.path.public.match, fs.readFileSync(matchProject.templates.match), function(err) {
				    if(err) {
				        console.log(err);
				    }
				});

				fs.mkdir(project.path.public.assets.self, function() {
					fs.mkdir(project.path.public.assets.sounds);
					fs.mkdir(project.path.public.assets.sprites);
				});

			});

			fs.writeFile(project.path.app, fs.readFileSync(matchProject.templates.server), function(err) {
			    if(err) {
			        console.log(err);
			    }
			});

			console.log("	Project", project.name, "created");

		} else {

			console.log(error);

		}

	});

}